#!/usr/bin/python3

import argparse
import sys
import os
import torch

import torchvision.transforms as transforms
from torchvision.utils import save_image
from torch.utils.data import DataLoader

from models import GeneratorResNet
from dataset import ImageDataset

parser = argparse.ArgumentParser()

parser.add_argument('--batchSize', type=int, default=1, help='size of the batches')
parser.add_argument('--dataroot', type=str, default='datasets/vangogh2photo/', help='root directory of the dataset')
parser.add_argument('--size', type=int, default=256, help='size of the data crop (squared assumed)')
parser.add_argument('--input_nc', type=int, default=3, help='number of channels of input data')
parser.add_argument('--output_nc', type=int, default=3, help='number of channels of output data')
parser.add_argument('--cuda', action='store_true', help='use GPU computation')
parser.add_argument('--n_cpu', type=int, default=4, help='number of cpu threads to use during batch generation')
parser.add_argument('--scalingoutput', type=int, default=500,help="the desired scaling dimension of the output image")
parser.add_argument('--generator_photo2vangogh', type=str,default='checkpoints/G_BA_state_dict.pth', help='B2A generator checkpoint file')          

opt = parser.parse_args()
print(opt)


input_shape = (opt.input_nc, opt.size, opt.sizd) # (3,256,256)
n_residual_blocks = 9 # suggested default, number of residual blocks in generator

G_BA = GeneratorResNet(input_shape, n_residual_blocks)

if torch.cuda.is_available() and not opt.cuda:
    print("WARNING: You have a CUDA device, so you should probably run with --cuda")


if opt.cuda:
    G_BA.cuda()

torch.load_state_dict(torch.load(opt.generator_photo2vangogh))
G_BA.eval()
transforms_ = [ transforms.ToTensor(),
                transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5)) ]
dataloader = DataLoader(ImageDataset(opt.dataroot, transforms_=transforms_, mode='test'), 
                        batch_size=opt.batchSize, shuffle=False, num_workers=opt.n_cpu)



if not os.path.exists('results'):
    os.makedirs('results')

for i, batch in enumerate(dataloader):
    real_A = batch['A']
    real_B = batch['B']

    fake_A = 0.5*(G_BA(real_B).data + 1.0)

    # Save image files
    save_image(fake_A, f'results/{i+1}d.png')

    sys.stdout.write(f'\rGenerated images {i+1} of {dataloader}' )

sys.stdout.write('\n')